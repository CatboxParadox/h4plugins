NTP Functions provided:
=======================

The internal NTP/CLock system operates on EPOCH, not local (timezoned) time or
any seasonal adjustments.

*Note: I suspect this affects functions such as at, daily, etc.  As these will
now take place at UTC and not at any form of local time.  This is to allow all
devices using time, regardless of where they are in the world, to be in 'sync'
with each other.  Although this appears to be a right pain for noobs, once you
understand the necessity to perfrom all time based operations at NTC, it all
makes sense.  But it does take some effort to 'get this'.  All modern time
based systems now function at UTC, rather than locally adjusted time.  And
conversions are only made when information needs to be presented for human
consumption.  This needs to be documented to explain this to the user and made
clear to the noob.  I am happy to halp write this as it is important and
somethimes difficult to convey to satisfaction.

*Note: All internal times are from EPOCH and calculated in seconds.  This
keeps everything function with integer maths, but allows for a fairly fine
resolution within the proceedings.

*Note: Dates are ISO = YYYY-MM-DD which is country independant.


Get current UTC time from NTP subsystem:
	uint32_t clockEPOCH()
	Returns the number of seconds since Linux EPOCH (Midnight on 01Jan1970)

Get the current UTC time plus the defined timezone offset:
	uint32_t clockEPOCHLocal()
	Returns the number of seconds since Linux EPOCH plus the defined TZ offset,

Get the current UTC time plus TZ as a string.
	string clockStrTimeLocal()
	Returns the current UTC time since Linux EPOCH plus the defined TZ offset
	in the ISO format of 'ddd YYYY-MM-DD HH:MM:SS'.

Convert the supplied number of seconds since EPOCH as a time string:
  string strfTime(uint32_t t)
  Returns the supplied number of seconds as a ISO string for the time only,
  ignoring the date parts of the time. Format = 'HH:MM:SS'.

Convert the supplied number of seconds since EPOCH as a date string:
	string strfDate(uint32_t t)
  Returns the supplied number of seconds as a ISO string for the date only,
  ignoring the time parts of the time. Format = "YYYY-MM-DD".

Convert the supplied number of seconds into the supplied format.
	string strfDateTime(char fmt[] = "%a %Y-%m-%d %H:%M:%S", uint32_t t=0)
  Returns a string formatting of the supplied number of seconds since EPOCH,
  using the standard Linux time formating expansion.  If the format is omitted,
  then a long ISO format date and time is returned.

Get the number of seconds of DST offset for the time given in the EU.
	int DST_EU(uint32_t t)
	Returns the number of seconds that should be applied if DST is required for
	the supplied time.  This can then be added to effect DST.  Combined with
	TZ and Local time, and actual time is generated suitable for display for
	human use.  This function returns the offset used by EU contries that support
	DST needs, including the UK.  This works for any time/date in the range 1900
	through to 2099 inclusive.  And can be used for historical and future times.

Get the number of seconds of DST offset for the time givien in the USA.
	int DST_USA(uint32_t t)
	See DST_EU() for further information.  This function works for time/date in
	the range of 2007 to 2099 inclusive.  And 1950 to 1969 inclusive.  DST in the
	USA operated from 1950 to 1969 had one method of calculation and another
	method from 2007 onwards.
	
*Note: Other DST Offsets: Will need the relevant author to code themselves and offer
for possible inclusion.
